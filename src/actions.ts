"use server";
import { getIronSession } from "iron-session";
import { defaultSession, SessionData, sessionOptions } from "./lib/sessionOptions";
import { cookies } from "next/headers";
import { Address, isAddress, recoverMessageAddress } from "viem";
import { redirect } from "next/navigation";
import { SignMessageReturnType } from "viem/accounts";

/**
 * Retrieves the current session using Iron Session.
 * If the session is not logged in, it sets the default session state.
 * @returns {Promise<SessionData>} - Returns the current session data.
 */
export const getSession = async () => {
  const session = await getIronSession<SessionData>(cookies(), sessionOptions);

  if (!session.isLoggedIn) {
    session.isLoggedIn = defaultSession.isLoggedIn;
  }

  return session;
};

/**
 * Handles the login action by verifying the user's signature.
 * If the address is valid and the signature matches, the session is established and the user is redirected to the home page.
 * @param {Address} address - The wallet address of the user.
 * @param {SignMessageReturnType} signature - The signature generated by the user wallet connection on Wagmi.
 * @param {string} message - The message that was signed by the user.
 * @returns {Promise<{ error?: string } | undefined>} - Returns an error if the login fails, otherwise undefined.
 */
export const loginAction = async (address: Address, signature: SignMessageReturnType, message: string) => {
  const session = await getSession();

  if (!isAddress(address)) {
    return { error: "Wrong adress!" };
  }

  const recoveredAddress = await recoverMessageAddress({ message, signature });

  if (recoveredAddress.toLowerCase() !== address.toLowerCase()) {
    return { error: "Invalid signature" };
  }

  session.isLoggedIn = true;
  session.walletAddress = address;
  await session.save();
  redirect("/dashboard");
};

/**
 * Handles the logout action by destroying the current session.
 * @returns {Promise<{ success: boolean }>} - Returns an object indicating the success of the logout action.
 */
export const logoutAction = async () => {
  const session = await getSession();
  session.destroy();
  redirect("/login");
};

/**
 * Validates the current session to check if the user is logged in and has a valid wallet address.
 * @returns {Promise<{ isValid: boolean }>} - Returns an object indicating whether the session is valid.
 */
export const validateSessionAction = async () => {
  const session = await getIronSession<SessionData>(cookies(), sessionOptions);

  return { isValid: session.isLoggedIn && session.walletAddress ? true : false };
};
